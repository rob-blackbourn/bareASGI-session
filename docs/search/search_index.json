{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Session Sopport for bareASGI \u00b6 This package provides session support for bareASGI . See getting started .","title":"Session Sopport for bareASGI"},{"location":"#session-sopport-for-bareasgi","text":"This package provides session support for bareASGI . See getting started .","title":"Session Sopport for bareASGI"},{"location":"api/bareasgi_session/","text":"module bareasgi_session \u00b6 Summary \u00b6 bareasgi_session function bareasgi_session . add_session_middleware \u00b6 Summary \u00b6 Add the session middleware bareasgi_session . add_session_middleware ( app : Application , storage : SessionStorage , cookie_factory : SessionCookieFactory ) -> Any Parameters \u00b6 app : Application The ASGI application storage : SessionStorage The session storage engine cookie_factory : SessionCookieFactory The session cookie factory Returns \u00b6 Any : class MemorySessionStorage ( SessionStorage ) \u00b6 Summary \u00b6 Memory session storage bareasgi_session . MemorySessionStorage ( ) -> None async method MemorySessionStorage . load \u00b6 Summary \u00b6 Load session data async MemorySessionStorage . load ( key : str ) -> dict Parameters \u00b6 key : str The session key. Returns \u00b6 dict : The session data. async method MemorySessionStorage . save \u00b6 Summary \u00b6 Save session data async MemorySessionStorage . save ( key : str , session : dict ) -> Any Parameters \u00b6 key : str The session key. session : dict The session data. Returns \u00b6 Any : class SessionCookieFactory \u00b6 Summary \u00b6 A session cookie factory. bareasgi_session . SessionCookieFactory ( name : [type] , expires : Optional[datetime] , max_age : Optional[Union[int, timedelta]] , path : Optional[bytes] , domain : Optional[bytes] , secure : bool , http_only : bool , same_site : Optional[bytes] ) -> None Parameters \u00b6 name : [type] (optional) The session cookie name. Defaults to SESSION_COOKIE_NAME. expires : Optional[datetime] (optional) The session cookie expiry. Defaults to SESSION_COOKIE_EXPIRES. max_age : Optional[Union[int, timedelta]] (optional) The maximum age of the session cookie. Defaults to SESSION_COOKIE_MAX_AGE. path : Optional[bytes] (optional) The session cookie path. Defaults to SESSION_COOKIE_PATH. domain : Optional[bytes] (optional) The session cookie domain. Defaults to SESSION_COOKIE_DOMAIN. secure : bool (optional) Indicates whether the cookie should be sent over https only. Defaults to SESSION_COOKIE_SECURE. http_only : bool (optional) Indicates whether the session cookie is available to JavaScript in the browser. Defaults to SESSION_COOKIE_HTTP_ONLY. same_site : Optional[bytes] (optional) CORS directive. Defaults to SESSION_COOKIE_SAME_SITE. method SessionCookieFactory . create_cookie \u00b6 Summary \u00b6 Creates the 'set-cookie' header value SessionCookieFactory . create_cookie ( key : str ) -> bytes Parameters \u00b6 key : str The session key Returns \u00b6 bytes : The set-cookie header value. class SessionStorage \u00b6 Summary \u00b6 Session Storage bareasgi_session . SessionStorage ( ) -> None async method SessionStorage . load \u00b6 Summary \u00b6 Load session data async SessionStorage . load ( key : str ) -> dict Parameters \u00b6 key : str The session key. Returns \u00b6 dict : The session data. async method SessionStorage . save \u00b6 Summary \u00b6 Save session data async SessionStorage . save ( key : str , session : dict ) -> Any Parameters \u00b6 key : str The session key. session : dict The session data. Returns \u00b6 Any :","title":"bareasgi_session"},{"location":"api/bareasgi_session/#module-bareasgi_session","text":"","title":"module bareasgi_session"},{"location":"api/bareasgi_session/#summary","text":"bareasgi_session","title":"Summary"},{"location":"api/bareasgi_session/#function-bareasgi_sessionadd_session_middleware","text":"","title":"function bareasgi_session.add_session_middleware"},{"location":"api/bareasgi_session/#summary_1","text":"Add the session middleware bareasgi_session . add_session_middleware ( app : Application , storage : SessionStorage , cookie_factory : SessionCookieFactory ) -> Any","title":"Summary"},{"location":"api/bareasgi_session/#parameters","text":"app : Application The ASGI application storage : SessionStorage The session storage engine cookie_factory : SessionCookieFactory The session cookie factory","title":"Parameters"},{"location":"api/bareasgi_session/#returns","text":"Any :","title":"Returns"},{"location":"api/bareasgi_session/#class-memorysessionstoragesessionstorage","text":"","title":"class MemorySessionStorage(SessionStorage)"},{"location":"api/bareasgi_session/#summary_2","text":"Memory session storage bareasgi_session . MemorySessionStorage ( ) -> None","title":"Summary"},{"location":"api/bareasgi_session/#async-method-memorysessionstorageload","text":"","title":"async method MemorySessionStorage.load"},{"location":"api/bareasgi_session/#summary_3","text":"Load session data async MemorySessionStorage . load ( key : str ) -> dict","title":"Summary"},{"location":"api/bareasgi_session/#parameters_1","text":"key : str The session key.","title":"Parameters"},{"location":"api/bareasgi_session/#returns_1","text":"dict : The session data.","title":"Returns"},{"location":"api/bareasgi_session/#async-method-memorysessionstoragesave","text":"","title":"async method MemorySessionStorage.save"},{"location":"api/bareasgi_session/#summary_4","text":"Save session data async MemorySessionStorage . save ( key : str , session : dict ) -> Any","title":"Summary"},{"location":"api/bareasgi_session/#parameters_2","text":"key : str The session key. session : dict The session data.","title":"Parameters"},{"location":"api/bareasgi_session/#returns_2","text":"Any :","title":"Returns"},{"location":"api/bareasgi_session/#class-sessioncookiefactory","text":"","title":"class SessionCookieFactory"},{"location":"api/bareasgi_session/#summary_5","text":"A session cookie factory. bareasgi_session . SessionCookieFactory ( name : [type] , expires : Optional[datetime] , max_age : Optional[Union[int, timedelta]] , path : Optional[bytes] , domain : Optional[bytes] , secure : bool , http_only : bool , same_site : Optional[bytes] ) -> None","title":"Summary"},{"location":"api/bareasgi_session/#parameters_3","text":"name : [type] (optional) The session cookie name. Defaults to SESSION_COOKIE_NAME. expires : Optional[datetime] (optional) The session cookie expiry. Defaults to SESSION_COOKIE_EXPIRES. max_age : Optional[Union[int, timedelta]] (optional) The maximum age of the session cookie. Defaults to SESSION_COOKIE_MAX_AGE. path : Optional[bytes] (optional) The session cookie path. Defaults to SESSION_COOKIE_PATH. domain : Optional[bytes] (optional) The session cookie domain. Defaults to SESSION_COOKIE_DOMAIN. secure : bool (optional) Indicates whether the cookie should be sent over https only. Defaults to SESSION_COOKIE_SECURE. http_only : bool (optional) Indicates whether the session cookie is available to JavaScript in the browser. Defaults to SESSION_COOKIE_HTTP_ONLY. same_site : Optional[bytes] (optional) CORS directive. Defaults to SESSION_COOKIE_SAME_SITE.","title":"Parameters"},{"location":"api/bareasgi_session/#method-sessioncookiefactorycreate_cookie","text":"","title":"method SessionCookieFactory.create_cookie"},{"location":"api/bareasgi_session/#summary_6","text":"Creates the 'set-cookie' header value SessionCookieFactory . create_cookie ( key : str ) -> bytes","title":"Summary"},{"location":"api/bareasgi_session/#parameters_4","text":"key : str The session key","title":"Parameters"},{"location":"api/bareasgi_session/#returns_3","text":"bytes : The set-cookie header value.","title":"Returns"},{"location":"api/bareasgi_session/#class-sessionstorage","text":"","title":"class SessionStorage"},{"location":"api/bareasgi_session/#summary_7","text":"Session Storage bareasgi_session . SessionStorage ( ) -> None","title":"Summary"},{"location":"api/bareasgi_session/#async-method-sessionstorageload","text":"","title":"async method SessionStorage.load"},{"location":"api/bareasgi_session/#summary_8","text":"Load session data async SessionStorage . load ( key : str ) -> dict","title":"Summary"},{"location":"api/bareasgi_session/#parameters_5","text":"key : str The session key.","title":"Parameters"},{"location":"api/bareasgi_session/#returns_4","text":"dict : The session data.","title":"Returns"},{"location":"api/bareasgi_session/#async-method-sessionstoragesave","text":"","title":"async method SessionStorage.save"},{"location":"api/bareasgi_session/#summary_9","text":"Save session data async SessionStorage . save ( key : str , session : dict ) -> Any","title":"Summary"},{"location":"api/bareasgi_session/#parameters_6","text":"key : str The session key. session : dict The session data.","title":"Parameters"},{"location":"api/bareasgi_session/#returns_5","text":"Any :","title":"Returns"},{"location":"user-guide/getting-started/","text":"Getting Started \u00b6 You can add seesion middleware with the add_session_middleware helper function. import socket from bareasgi import Application from bareasgi_session import ( add_session_middleware , MemorySessionStorage , SessionCookieFactory ) app = Application () fqdn = socket . getfqdn () host , _sep , domain_name = fqdn . partition ( ',' ) add_session_middleware ( app , MemorySessionStorage (), SessionCookieFactory ( domain = ( domain_name or host ) . encode ()) ) The session gets stored in the info parameter in the request handler through the SESSION_COOKIE_KEY : from datetime import datetime from bareutils import text_writer from bareasgi_session import SESSION_COOKIE_KEY async def session_handler ( scope , info , matches , content ): session = info [ SESSION_COOKIE_KEY ] now = session . get ( 'now' ) message = f 'The time was {now} ' if now else 'First time' session [ 'now' ] = datetime . now () headers : List [ Header ] = [ ( b 'content-type' , b 'text/plain' ), ( b 'content-length' , str ( len ( message )) . encode ( 'ascii' )) ] return 200 , headers , text_writer ( message )","title":"Getting Started"},{"location":"user-guide/getting-started/#getting-started","text":"You can add seesion middleware with the add_session_middleware helper function. import socket from bareasgi import Application from bareasgi_session import ( add_session_middleware , MemorySessionStorage , SessionCookieFactory ) app = Application () fqdn = socket . getfqdn () host , _sep , domain_name = fqdn . partition ( ',' ) add_session_middleware ( app , MemorySessionStorage (), SessionCookieFactory ( domain = ( domain_name or host ) . encode ()) ) The session gets stored in the info parameter in the request handler through the SESSION_COOKIE_KEY : from datetime import datetime from bareutils import text_writer from bareasgi_session import SESSION_COOKIE_KEY async def session_handler ( scope , info , matches , content ): session = info [ SESSION_COOKIE_KEY ] now = session . get ( 'now' ) message = f 'The time was {now} ' if now else 'First time' session [ 'now' ] = datetime . now () headers : List [ Header ] = [ ( b 'content-type' , b 'text/plain' ), ( b 'content-length' , str ( len ( message )) . encode ( 'ascii' )) ] return 200 , headers , text_writer ( message )","title":"Getting Started"},{"location":"user-guide/installation/","text":"Installation \u00b6 The package can be installed with pip: pip install bareasgi-session","title":"Installation"},{"location":"user-guide/installation/#installation","text":"The package can be installed with pip: pip install bareasgi-session","title":"Installation"}]}